<center>


<form action="/new" method="get">

<button>New Game</button>
</form>

<% if flash[:notice] %>
    <h2 class="notice" ><%= flash[:notice] %></h2>
<% else %>
    <h2 class="notice">Move When Ready</h2>
<% end %>

<% if !@game.whites_turn %>
<h1 style="background-color: black; width: 426px;">
<span class="black">Black's turn</span>
</h1>
<% else %>
<h1 style="background-color: lightgrey; width: 426px;">
<span class="white">White's turn</span>
</h1>
<% end %>

  
  <% (0..7).each do |n| %>
      <div class="col">
      
      <% 8.times do |i| %>
      
        <% if ((i + n) % 2 == 0) %>
      
        <div style="background-color:white;" 
        class="space" id="<%= n %>x<%= i %>y">
          <% piece = @game.board[n,i] %>
          <% if piece %>
            <span id="<%= piece.html %>"><%= piece %></span>
          <% end %>
        </div>
        <% else %>
      
        <div style="background-color:green;" 
        class="space" id="<%= n %>x<%= i %>y">
          <% piece = @game.board[n,i] %>
          <% if piece %>
            <span id="<%= piece.html %>"><%= piece %></span>
          <% end %>
        </div>
        <% end %>
        
      <% end %>


      </div>

  <% end %>
  

  </div>
  <br><br>
  
  <% if @game.whites_turn %>
  <h1 style="background-color: lightgrey; width: 431px;">
    <span class="white">White's turn</span>
  </h1>
  <% else %>
  <h1 style="background-color: black; width: 431px;">
    <span class="black">Black's turn</span>
  </h1>
  <% end %>
  
  <% if flash[:notice] %>
      <h2 class="notice"><%= flash[:notice] %></h2>
  <% else %>
      <h2 class="notice">Move When Ready</h2>
  <% end %>

  </center>


  
<section id="session-info">
  <h3>Session Token: <%= @s_token[0..10] %>...</h3>
  <p>Your browser is given a new session token (encrypted in the cookie) for each new game.  Similarly the new game created in the database is given a matching token.  This token will ensure that, with every request, the client is playing the game which <i>they</i> started.  The state of games are stringified and updated in the database on every move.  As of now the DB only knows where all the pieces are and whose turn it is.  It doesn't yet know, for example, if you've moved your king.  The logic for the game is found in '/app/models'. </p>
  <p>If you want to dig a little deeper, look at the 'games_controller.rb' and 'game.rb' to see how the Game model in the database is converted into a more complex ChessGame object in Ruby. The most interesting part of this application is how the ChessGame class evaluates moves (both the moves requested and all viable moves) to determine the state of the game - 'check', 'checkmate', 'invalid move', etc.</p>
</section>


  
